version: "3.8"

services:
  nginx:
    image: nginx:latest
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
    networks:
      - proxy
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    deploy:
      placement:
        constraints:
          - node.role == manager

  postgres:
    image: postgres:17.4
    volumes:
      - postgres-query-forge-dev:/var/lib/postgresql/data
    networks:
      - internal
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    deploy:
      replicas: 1

  nestjs:
    build:
      context: ./backend/query-forge-dev
      dockerfile: Dockerfile
    working_dir: /app
    volumes:
      - ./backend/query-forge-dev:/app
      - /app/node_modules
    networks:
      - proxy
      - internal
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
      - JWT_SECRET=${JWT_SECRET}
      - NEST_PORT=${NEST_PORT}
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
      - NODE_ENV=${NEST_ENV}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - FRONTEND_URL=${FRONTEND_URL}
    deploy:
      replicas: 2

  adminer:
    image: adminer:latest
    networks:
      - proxy
      - internal
    depends_on:
      - postgres
    deploy:
      replicas: 1

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    environment:
      - discovery.type=${EL_DISCOVERY_TYPE}
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - xpack.security.enabled=false
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - internal
    deploy:
      replicas: 1

  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
    depends_on:
      - elasticsearch
    networks:
      - proxy
      - internal
    deploy:
      replicas: 1

  agent-ia-service:
    build:
      context: ./backend/agent-ia-service
      dockerfile: Dockerfile
    working_dir: /app
    volumes:
      - ./backend/agent-ia-service:/app
      - /app/node_modules
    networks:
      - proxy
      - internal
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AGENT_AI_PORT=${AGENT_AI_PORT}
      - AGENT_AI_REQUIRE_AUTH=${AGENT_AI_REQUIRE_AUTH}
      - JWT_SECRET=${JWT_SECRET}
    deploy:
      replicas: 2

  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    working_dir: /app
    volumes:
      - ./backend/auth-service:/app
      - /app/node_modules
    networks:
      - proxy
      - internal
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN}
      - PORT=${AUTH_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - FRONTEND_URL=${FRONTEND_URL}
      - NEST_BASE_URL=${NEST_BASE_URL}
    depends_on:
      - postgres
    deploy:
      replicas: 2

  scraping-service:
    build:
      context: ./backend/scraping-service
      dockerfile: Dockerfile
    working_dir: /app
    volumes:
      - ./backend/scraping-service:/app
      - /app/node_modules
    networks:
      - proxy
      - internal
    environment:
      - SCRAPING_SERVICE_PORT=${SCRAPING_SERVICE_PORT}
    cap_add:
      - SYS_ADMIN
    init: true
    security_opt:
      - seccomp:unconfined
    deploy:
      replicas: 2

  sync-service:
    build:
      context: ./backend/sync-service
      dockerfile: Dockerfile
    volumes:
      - ./backend/sync-service/src:/app/src
    networks:
      - proxy
      - internal
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - APIFY_API_TOKEN=${APIFY_API_TOKEN}
      - SCRAPER_SERVICE_URL=${SCRAPER_SERVICE_URL}
      - SYNC_PORT=${SYNC_PORT}
    deploy:
      restart_policy:
        condition: on-failure
      replicas: 1

  frontend:
    build:
      context: ./frontend
      dockerfile: dockerfile
      args:
        - AUTH_BASE_URL=${AUTH_BASE_URL}
        - NEST_BASE_URL=${NEST_LOCAL_URL}
        - SCRAPER_LOCAL_URL=${SCRAPER_LOCAL_URL}
        - AGENT_IA_HOST=${AGENT_IA_HOST}
    working_dir: /app
    volumes:
      - /app/node_modules
    networks:
      - proxy
    environment:
      - NUXT_HOST=0.0.0.0
      - NUXT_PORT=4444
      - AUTH_BASE_URL=${AUTH_BASE_URL}
      - NEST_BASE_URL=${NEST_LOCAL_URL}
      - SCRAPER_LOCAL_URL=${SCRAPER_LOCAL_URL}
      - AGENT_IA_HOST=${AGENT_IA_HOST}
    deploy:
      replicas: 1

volumes:
  postgres-query-forge-dev:
  esdata:

networks:
  proxy:
    driver: overlay
    attachable: true
  internal:
    driver: overlay
    attachable: true
