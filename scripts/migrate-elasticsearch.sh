#!/bin/bash

# üîÑ Script de migration compl√®te Elasticsearch vers LXC
# Utilisation: ./migrate-elasticsearch.sh [method]

set -e

# Configuration
DOCKER_CONTAINER="elasticsearch"
DOCKER_COMPOSE_FILE="compose.yaml"
LXC_IP="${LXC_IP:-192.168.1.44}"
BACKUP_DIR="./elasticsearch-backup"
METHOD="${1:-elasticdump}"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier les pr√©requis
check_prerequisites() {
    log "üîç V√©rification des pr√©requis..."
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        error "Docker n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier que les scripts existent
    if [ ! -f "./scripts/export-elasticsearch.sh" ] || [ ! -f "./scripts/import-elasticsearch.sh" ]; then
        error "Scripts d'export/import manquants"
        exit 1
    fi
    
    # Rendre les scripts ex√©cutables
    chmod +x ./scripts/export-elasticsearch.sh
    chmod +x ./scripts/import-elasticsearch.sh
    
    success "Pr√©requis OK"
}

# V√©rifier le statut du container Docker
check_docker_container() {
    log "üê≥ V√©rification du container Elasticsearch..."
    
    if docker ps | grep -q "$DOCKER_CONTAINER"; then
        success "Container Elasticsearch en cours d'ex√©cution"
        
        # Obtenir l'IP du container
        CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$DOCKER_CONTAINER")
        if [ -n "$CONTAINER_IP" ]; then
            log "IP du container: $CONTAINER_IP"
            export ELASTICSEARCH_HOST="$CONTAINER_IP:9200"
        else
            export ELASTICSEARCH_HOST="localhost:9200"
        fi
    else
        error "Container Elasticsearch non trouv√© ou arr√™t√©"
        log "D√©marrage du container..."
        docker-compose -f "$DOCKER_COMPOSE_FILE" up -d elasticsearch
        
        # Attendre que le container soit pr√™t
        log "Attente du d√©marrage..."
        sleep 30
        
        # V√©rifier √† nouveau
        if docker ps | grep -q "$DOCKER_CONTAINER"; then
            success "Container Elasticsearch d√©marr√©"
        else
            error "Impossible de d√©marrer le container Elasticsearch"
            exit 1
        fi
    fi
}

# V√©rifier le statut du LXC
check_lxc_status() {
    log "üîß V√©rification du LXC Elasticsearch..."
    
    if ping -c 1 "$LXC_IP" &> /dev/null; then
        success "LXC Elasticsearch accessible sur $LXC_IP"
        
        # V√©rifier si Elasticsearch est en cours d'ex√©cution
        if curl -s "http://${LXC_IP}:9200/_cluster/health" &> /dev/null; then
            success "Elasticsearch en cours d'ex√©cution sur le LXC"
        else
            warning "Elasticsearch non accessible sur le LXC"
            warning "V√©rifiez que le service est d√©marr√©"
        fi
    else
        error "LXC Elasticsearch non accessible sur $LXC_IP"
        error "V√©rifiez que le LXC est d√©marr√©"
        exit 1
    fi
}

# Exporter les donn√©es depuis Docker
export_from_docker() {
    log "üì§ Export des donn√©es depuis Docker..."
    
    # Exporter les donn√©es
    ELASTICSEARCH_HOST="$ELASTICSEARCH_HOST" ./scripts/export-elasticsearch.sh "$METHOD"
    
    success "Export termin√© depuis Docker"
}

# Importer les donn√©es vers le LXC
import_to_lxc() {
    log "üì• Import des donn√©es vers le LXC..."
    
    # Importer les donn√©es
    ELASTICSEARCH_HOST="$LXC_IP:9200" ./scripts/import-elasticsearch.sh "$METHOD" "$BACKUP_DIR"
    
    success "Import termin√© vers le LXC"
}

# Comparer les donn√©es
compare_data() {
    log "üîç Comparaison des donn√©es..."
    
    # Compter les documents dans Docker
    DOCKER_COUNT=$(curl -s "http://${ELASTICSEARCH_HOST}/_count" | grep -o '"count":[0-9]*' | cut -d':' -f2)
    
    # Compter les documents dans le LXC
    LXC_COUNT=$(curl -s "http://${LXC_IP}:9200/_count" | grep -o '"count":[0-9]*' | cut -d':' -f2)
    
    log "Documents dans Docker: $DOCKER_COUNT"
    log "Documents dans LXC: $LXC_COUNT"
    
    if [ "$DOCKER_COUNT" = "$LXC_COUNT" ]; then
        success "‚úÖ Migration r√©ussie ! Nombre de documents identique"
    else
        warning "‚ö†Ô∏è  Nombre de documents diff√©rent. V√©rifiez la migration"
    fi
}

# Nettoyer les fichiers temporaires
cleanup() {
    log "üßπ Nettoyage des fichiers temporaires..."
    
    if [ -d "$BACKUP_DIR" ]; then
        read -p "Supprimer le r√©pertoire de sauvegarde $BACKUP_DIR ? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            rm -rf "$BACKUP_DIR"
            success "R√©pertoire de sauvegarde supprim√©"
        fi
    fi
}

# Cr√©er un script de validation
create_validation_script() {
    log "üìã Cr√©ation du script de validation..."
    
    cat > ./scripts/validate-migration.sh << 'EOF'
#!/bin/bash

# Script de validation de la migration
DOCKER_HOST="${ELASTICSEARCH_HOST:-localhost:9200}"
LXC_HOST="${LXC_IP:-192.168.1.44}:9200"

echo "üîç Validation de la migration Elasticsearch"
echo "================================="

# V√©rifier la connectivit√©
echo "üì° Test de connectivit√©:"
echo -n "  Docker: "
if curl -s "http://${DOCKER_HOST}/_cluster/health" > /dev/null; then
    echo "‚úÖ OK"
else
    echo "‚ùå KO"
fi

echo -n "  LXC: "
if curl -s "http://${LXC_HOST}/_cluster/health" > /dev/null; then
    echo "‚úÖ OK"
else
    echo "‚ùå KO"
fi

# Comparer les index
echo ""
echo "üìä Comparaison des index:"
echo "  Docker:"
curl -s "http://${DOCKER_HOST}/_cat/indices?v"
echo ""
echo "  LXC:"
curl -s "http://${LXC_HOST}/_cat/indices?v"

# Comparer les mappings
echo ""
echo "üóÇÔ∏è  Comparaison des mappings:"
echo "  Docker:"
curl -s "http://${DOCKER_HOST}/contents/_mapping" | jq '.contents.mappings.properties | keys'
echo "  LXC:"
curl -s "http://${LXC_HOST}/contents/_mapping" | jq '.contents.mappings.properties | keys'

# Test de recherche
echo ""
echo "üîç Test de recherche:"
SEARCH_QUERY="javascript"
echo "  Recherche: $SEARCH_QUERY"
echo "  Docker r√©sultats:"
curl -s "http://${DOCKER_HOST}/contents/_search?q=$SEARCH_QUERY&size=1" | jq '.hits.total'
echo "  LXC r√©sultats:"
curl -s "http://${LXC_HOST}/contents/_search?q=$SEARCH_QUERY&size=1" | jq '.hits.total'

echo ""
echo "‚úÖ Validation termin√©e"
EOF

    chmod +x ./scripts/validate-migration.sh
    success "Script de validation cr√©√©: ./scripts/validate-migration.sh"
}

# Fonction d'aide
show_help() {
    echo "üîÑ Script de migration compl√®te Elasticsearch vers LXC"
    echo ""
    echo "Usage: $0 [METHOD]"
    echo ""
    echo "M√©thodes disponibles:"
    echo "  elasticdump    Migration avec elasticdump (recommand√©)"
    echo "  snapshot       Migration avec snapshot Elasticsearch"
    echo "  curl           Migration simple avec curl"
    echo ""
    echo "Variables d'environnement:"
    echo "  LXC_IP                IP du LXC Elasticsearch (d√©faut: 192.168.1.44)"
    echo ""
    echo "Exemples:"
    echo "  $0 elasticdump"
    echo "  LXC_IP=192.168.1.50 $0 elasticdump"
    echo ""
    echo "√âtapes de la migration:"
    echo "  1. V√©rification des pr√©requis"
    echo "  2. V√©rification du container Docker"
    echo "  3. V√©rification du LXC"
    echo "  4. Export depuis Docker"
    echo "  5. Import vers LXC"
    echo "  6. Validation"
    echo "  7. Nettoyage (optionnel)"
}

# Fonction principale
main() {
    if [ "$1" = "help" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        show_help
        exit 0
    fi
    
    log "üöÄ D√©marrage de la migration Elasticsearch"
    log "M√©thode: $METHOD"
    log "LXC IP: $LXC_IP"
    log "R√©pertoire de sauvegarde: $BACKUP_DIR"
    
    # √âtapes de la migration
    check_prerequisites
    check_docker_container
    check_lxc_status
    export_from_docker
    import_to_lxc
    compare_data
    create_validation_script
    
    success "üéâ Migration termin√©e avec succ√®s!"
    log "üìã Ex√©cutez ./scripts/validate-migration.sh pour valider la migration"
    
    # Proposer le nettoyage
    cleanup
}

# Ex√©cuter la fonction principale
main "$@" 