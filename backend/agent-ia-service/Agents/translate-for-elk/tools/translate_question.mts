import { tool } from "@langchain/core/tools";
import { z } from "zod";
import { ChatOpenAI } from "@langchain/openai";

const llm = new ChatOpenAI({
  temperature: 0.1,
  model: "gpt-3.5-turbo",
  apiKey: process.env.OPENAI_API_KEY,
});

export const translateQuestion = tool(
  async ({ userQuestion }) => {
    try {
      console.log("üîç Question originale :", userQuestion);

      const prompt = `
Tu es un expert en recherche de contenu vid√©o. Ta mission est de transformer la question de l'utilisateur en mots-cl√©s optimis√©s pour une recherche dans une base de donn√©es elasticsearch.

R√®gles importantes :
- Extrais les concepts cl√©s et mots-cl√©s techniques
- Supprime les mots de liaison inutiles (comment, faire, etc.)
- Garde les termes techniques pr√©cis
- Retourne une cha√Æne de mots-cl√©s s√©par√©s par des espaces
- Maximum 5-8 mots-cl√©s

Exemples :
- "Comment faire un array en C ?" ‚Üí "array C programmation"
- "Je veux apprendre les boucles en Python" ‚Üí "boucles Python programmation"
- "Tutoriel sur les fonctions JavaScript" ‚Üí "fonctions JavaScript tutoriel"

Question utilisateur : "${userQuestion}"

Mots-cl√©s optimis√©s :`;

      const response = await llm.invoke(prompt);
      const translatedKeywords = response.content.toString().trim();

      console.log("üéØ Mots-cl√©s traduits :", translatedKeywords);

      return translatedKeywords;
    } catch (error) {
      console.error("Erreur traduction question:", error);
      return userQuestion; // Fallback sur la question originale
    }
  },
  {
    name: "translate_question",
    description:
      "Traduit et optimise la question de l'utilisateur en mots-cl√©s pour la recherche vid√©o.",
    schema: z.object({
      userQuestion: z
        .string()
        .describe(
          "La question originale de l'utilisateur √† traduire/optimiser."
        ),
    }),
  }
);
